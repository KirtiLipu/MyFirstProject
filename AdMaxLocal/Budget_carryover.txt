CMG_MUUID_CID mapping:

Select seu.searchEngineIdentifier as CustomerID,a.description as MerchantUUID,seu.distributionID From tsacommon.searchEngineUsers seu JOIN tsacommon.accounts a ON a.id=seu.accountID where seu.searchEngineIdentifier is NOT NULL order by a.description,seu.distributionID;

select searchEngineIdentifier as CustomerID,substring_index(description,"_",1) as MerchantUUID,distributionID from tsacommon.searchEngineUsers where searchEngineIdentifier is NOT NULL;


34 07 3 * * sudo /home/amlops/ops-custom-scripts/vca_deployed_order.sh -h aml17-mysql1 -o /var/local/tsa/Mercury_Reports/vca/ >> /tmp/vca_deployed_order.log 2>&1

*****ABU doesnâ€™t look at Search Engine User table or the AdMax campaign table. It looks at EndDate for the campaigns in admaxNominalMonthlyBudgets table. 

#===================================================#
#			Paused Budget Accrual Status:			#
#===================================================#
Step 1: Find out merchantUUID for given customer_id
select id,customer_id from smb.merchants where customer_id in (363824,568748,570177,396681);

Step 2: Find out admaxCampaignID's for Active or Paused compaigns.
select * from admaxCampaigns where description like "%075d9a59-3748-4686-8d48-54294584a6a9%" and status='Active';
select * from admaxCampaigns where description like "%e7253b24-e8f3-4801-80aa-94b57183cda3%" and status='Paused';

Step 3: List out admaxCampaignBudgetAccrualStatus and update.
select * from admaxCampaignBudgetAccrualStatus where admaxCampaignID in (4914,4915);
update admaxCampaignBudgetAccrualStatus set endDate='2018-08-24' where admaxCampaignID in (15624,15625,15626,15627,15628,15629);

update admaxCampaignBudgetAccrualStatus set endDate='2018-04-09' where id in (13208,13209,13210,13211,13212,13213,13217,13218,13219,14574,14575,14576);

End date == today date
	4334,4335,4336,4337,4338
	


Step 4: Insert query with start date tomorrow and end date NULL and status=paused.

insert into admaxCampaignBudgetAccrualStatus (admaxCampaignID,startDate,endDate,status) values(15624,'2020-08-25',NULL,'paused'),(15625,'2020-08-25',NULL,'paused'),(15626,'2020-08-25',NULL,'paused'),(15627,'2020-08-25',NULL,'paused'),(15628,'2020-08-25',NULL,'paused'),(15629,'2020-08-25',NULL,'paused'); 

budget accrual task with help of above steps

363824,568748,570177,396681


| e7253b24-e8f3-4801-80aa-94b57183cda3 | 363824      |
| 6465e965-010f-4807-aa52-bd798219c38e | 396681      |
| 016337c8-5115-4e0b-b51a-c719d9270771 | 568748      |
| 8abb70ba-991c-4aa7-b4da-9a76d5a95ba6 | 570177      |



#==============================================================================#
# 	         AML Monthly Budget Carryover Comparison Report			 		   #
#==============================================================================#
Monthly Budget & Carryover Comparison

vlookup, if	( =VLOOKUP(B2,Sheet1!B:C,2,FALSE)  )
 copy the record of two queries and paste in excel sheets with two different tab.
 short the id column in carryover records sheet.
 vlookup the carryover column in monthly budget sheet and if condition apply on carryover exceeding budget column.
 
CARRYOVER : 

select re.name,mer.id, SUM(IFNULL(amcar.commonCarryover, 0) + IFNULL(amcar.dedicatedCarryover,0)) AS 'Sum of Account Carryover',IF(GROUP_CONCAT(amc.status) LIKE '%ACTIVE%', 'ACTIVE', IF(GROUP_CONCAT(amc.status) LIKE '%PAUSED%', 'PAUSED','DELETED')) AS 'Current Status' from admaxCampaigns amc left join admaxCarryovers amcar on amcar.admaxCampaignID=amc.id and amcar.type='boosted' AND amcar.date=(select MAX(last_carryover.date) from admaxCarryovers last_carryover where last_carryover.admaxCampaignID=amc.id and date<='2019-11-20') join tsacommon.accounts acc on acc.id=amc.accountID join smb.merchants mer on mer.id=acc.description join smb.resellers re on mer.reseller_id=re.id join clients.externalCampaignParent ecp on ecp.admaxCampaignID=amc.id and ecp.accountID=acc.id join mms_common.campaigns c on c.advertID=ecp.description group by mer.id order by re.name, mer.id;

Upddated Carryover Query:

SELECT re.name, res.description AS 'Merchant UUID', SUM(IFNULL(res.commonCarryover, 0) + IFNULL(res.dedicatedCarryover, 0)) AS 'Sum of Account Carryover', IF(GROUP_CONCAT(res.status) LIKE '%ACTIVE%', 'ACTIVE', IF(GROUP_CONCAT(res.status) LIKE '%PAUSED%', 'PAUSED', 'DELETED')) AS 'Current Status', res.distributionID FROM (SELECT DISTINCT ac.id AS campaignID, a.id, a.description, sea.distributionID, co.commonCarryover, co.pooledCarryover, IF(ac.status != 'Deleted', co.dedicatedCarryover, 0) AS dedicatedCarryover, ac.status FROM  tsacommon.accounts a JOIN admaxCampaigns ac ON ac.accountID = a.id JOIN admaxSearchEngineAccountMap semap ON semap.admaxCampaignID = ac.id JOIN tsacommon.searchEngineAccounts sea ON sea.id = semap.searchEngineAccountID JOIN admaxCarryovers co ON co.admaxCampaignID = ac.id AND co.date = (SELECT LEAST('2020-10-07', MAX(aco.date)) FROM admaxCarryovers aco WHERE aco.admaxCampaignID = ac.id AND aco.type = 'boosted')) AS res JOIN smb.merchants mer ON mer.id = res.description JOIN smb.resellers re ON mer.reseller_id = re.id GROUP BY mer.id , res.distributionID ORDER BY re.name , mer.id;



SELECT re.name, res.description AS 'Merchant UUID', SUM(IFNULL(res.commonCarryover, 0) + IFNULL(res.dedicatedCarryover, 0)) AS 'Sum of Account Carryover', IF(GROUP_CONCAT(res.status) LIKE '%ACTIVE%', 'ACTIVE', IF(GROUP_CONCAT(res.status) LIKE '%PAUSED%', 'PAUSED', 'DELETED')) AS 'Current Status' FROM (SELECT DISTINCT ac.id AS campaignID, a.id, a.description, co.commonCarryover, co.pooledCarryover, IF(ac.status != 'Deleted', co.dedicatedCarryover, 0) AS dedicatedCarryover, ac.status FROM  tsacommon.accounts a JOIN admaxCampaigns ac ON ac.accountID = a.id JOIN admaxSearchEngineAccountMap semap ON semap.admaxCampaignID = ac.id JOIN tsacommon.searchEngineAccounts sea ON sea.id = semap.searchEngineAccountID JOIN admaxCarryovers co ON co.admaxCampaignID = ac.id AND co.date = (SELECT LEAST('2020-01-02', MAX(aco.date)) FROM admaxCarryovers aco WHERE aco.admaxCampaignID = ac.id AND aco.type = 'boosted')) AS res JOIN smb.merchants mer ON mer.id = res.description JOIN smb.resellers re ON mer.reseller_id = re.id GROUP BY mer.id ORDER BY re.name , mer.id;

Only Monthly Budgets


Updated one:
Only for active campaign.

select re.name,mer.id,mer.display, SUM(anmb.budget) from admaxNominalMonthlyBudgets anmb join admaxCampaigns amc on anmb.admaxCampaignID=amc.id and anmb.endDate is NULL join tsacommon.accounts acc on acc.id=amc.accountID join smb.merchants mer on mer.id=acc.description join smb.resellers re on mer.reseller_id=re.id join smb.orders o on mer.id=o.merchant_id where o.state='PROCESSED' group by mer.id order by re.name, mer.id;

Only for paused campaign.

select re.name,mer.id,mer.display, SUM(anmb.budget) from admaxNominalMonthlyBudgets anmb join admaxCampaigns amc on anmb.admaxCampaignID=amc.id and anmb.endDate is NULL join tsacommon.accounts acc on acc.id=amc.accountID join smb.merchants mer on mer.id=acc.description join smb.resellers re on mer.reseller_id=re.id join smb.orders o on mer.id=o.merchant_id where o.state='PAUSED' group by mer.id order by re.name, mer.id;



select re.name,mer.id,mer.display,o.modified_on, SUM(anmb.budget) from admaxNominalMonthlyBudgets anmb join admaxCampaigns amc on anmb.admaxCampaignID=amc.id and anmb.endDate is NULL join tsacommon.accounts acc on acc.id=amc.accountID join smb.merchants mer on mer.id=acc.description join smb.resellers re on mer.reseller_id=re.id join smb.orders o on mer.id=o.merchant_id where o.state='PAUSED' and o.modified_on<='2020-05-31' group by mer.id order by re.name, mer.id;




select re.name,mer.id,mer.display, SUM(anmb.budget) from admaxNominalMonthlyBudgets anmb join admaxCampaigns amc on anmb.admaxCampaignID=amc.id and anmb.endDate is NOT NULL join tsacommon.accounts acc on acc.id=amc.accountID join smb.merchants mer on mer.id=acc.description join smb.resellers re on mer.reseller_id=re.id join smb.orders o on mer.id=o.merchant_id where o.state='ARCHIVED' group by mer.id order by re.name, mer.id;


=IF((E363/D363)>20%,"YES","NO")
=IF((E406/D406)>20%,"YES","NO")
=IF((E31/D31)>20%,"YES","NO")


Monthly report (YJ):

#=================================================================#
#				YJ_Performance Report:(Monthly report) :		  #
#=================================================================#

nohup mysql -uspike -ptar63t -haml27-mysql1 -e "SELECT 'IMP','Click','Cost','POS','QS','sea.description','MerchantUUID','Date' UNION ALL select sum(yjp.imps),sum(yjp.clicks),sum(yjp.cost),yjp.pos,yjp.qualityScore,sea.description,m.id,yjp.startTime from staging.yahooJPerformanceReports yjp join tsacommon.searchEngineAccounts sea on yjp.campaignid=sea.searchEngineIdentifier join tsacommon.accounts a on sea.accountID=a.id join smb.merchants m on a.description=m.id where yjp.startTime between '2020-03-01' and '2020-03-31' group by sea.description,yjp.startTime  into outfile '/tmp/YJ-Performance-Mar2020.csv' fields terminated by ',' lines terminated by '\\n';" &> /tmp/YJ-Performance-Mar2020.log &

Updated Query:
================
nohup mysql -uspike -ptar63t -haml27-mysql1 -e "SELECT 'IMP','Click','Cost','POS','QS','sea.description','MerchantUUID','Date' UNION ALL select sum(yjp.imps),sum(yjp.clicks),sum(yjp.cost),yjp.pos,yjp.qualityScore,sea.description,m.id,yjp.startTime from staging.yahooJPerformanceReports yjp  join tsacommon.searchEngineAccounts sea on yjp.accountID=sea.accountID  join tsacommon.accounts a on sea.accountID=a.id  join smb.merchants m on a.description=m.id  where yjp.startTime between '2020-03-01' and '2020-03-31' group by sea.description,yjp.startTime  into outfile '/tmp/YJ-Performance-Mar2020.csv' fields terminated by ',' lines terminated by '\\n';" &> /tmp/YJ-Performance-Mar2020.log &
===============================
nohup mysql -uspike -ptar63t -haml27-mysql1 -e "SELECT 'IMP','Click','Cost','POS','QS','sea.description','MerchantUUID','Date' UNION ALL select sum(yjp.imps),sum(yjp.clicks),sum(yjp.cost),yjp.pos,yjp.qualityScore,sea.description,m.id,yjp.startTime from staging.yahooJPerformanceReports yjp join tsacommon.searchEngineAccounts sea on yjp.campaignid=sea.searchEngineIdentifier join tsacommon.accounts a on sea.accountID=a.id join smb.merchants m on a.description=m.id where yjp.startTime between '2020-08-01' and '2020-08-31' group by sea.description,yjp.startTime into outfile '/tmp/YJ-Performance-Aug2020.csv' fields terminated by ',' lines terminated by '\\n';" &> /tmp/YJ-Performance-Aug2020.log &


Account level carryover report:

SELECT 'IMP','Click','Cost','POS','QS','sea.description','MerchantUUID','Date' UNION ALL select sum(yjp.imps),sum(yjp.clicks),sum(yjp.cost),yjp.pos,yjp.qualityScore,sea.description,m.id,yjp.startTime from staging.yahooJPerformanceReports yjp join tsacommon.searchEngineAccounts sea on yjp.campaignid=sea.searchEngineIdentifier join tsacommon.accounts a on sea.accountID=a.id join smb.merchants m on a.description=m.id where yjp.startTime between '2019-02-01' and '2019-02-28' group by sea.description,yjp.startTime;



/home/amlops/reportScriptsMercury/yj-reports/report-account-level-carryover-data.sh


location mismatch query:
==========================
select ta.id,c.accountID,a.bpID from campaigns c join accounts a on c.accountID=a.id join tsacommon.accounts ta on a.bpID=ta.description  where c.locationID in (3082,3083,3084,3085,3086,3087,3088,3089,3090,3091,3092,3093,3094,3095,3096,3097,3098,3099,3100,3101,3102,3103,3104,3105,3106,3107,3108,3109,3110,3111,3112,3113,3114,3115) group by ta.id,c.accountID,a.bpID;

select o.id,o.state,o.merchant_id,m.id from orders o join merchants m on o.merchant_id=m.id where o.state in ('PROCESSED','PAUSED') and m.id in ('c0ddcaa9-5585-4bbf-8507-6fe89e2b11fb');
select group_concat(seu.id) from tsacommon.accounts a join tsacommon.searchEngineUsers seu on  a.id=seu.accountID where a.description in ('d8c6eaf7-f3ef-44e4-a172-2e5135744546');

nohup /usr/local/tsa/bidmgr/campaigns_migrator.sh -d3 -U 1947,2011 > /tmp/campaigns_migration.log &


Query for identifying BA that have missing keyword file:
============================================================

select ba.id,ba.description,count(kl.id) from mms_common.businessAreas ba left join biz_function_location.keywordLists kl on ba.id=kl.businessFunctionID where ba.status='active' group by ba.id having count(kl.id)=0;


keyword list :
-----------------

select k.id,k.keywordListID,k.keyword,k.matchType,k.isNegative,kl.merchantUUID,kl.dateCreated,kl.dateUpdated from biz_function_location.keywords k join biz_function_location.keywordLists kl on k.keywordListID=kl.id where kl.merchantUUID='adeee36f-dd60-46bb-993b-6e7c42b23a10' and kl.dateUpdated like '2019-10-24%';

ab80e414-25b4-4e02-84d4-5d67c196d009

Where MUUID and dateUpdated can be updated as per request.

select * from biz_function_location.keywordLists limit 1;

Keywords Counts Query :
=======================

select count(*) from gce_keyword gk join gce_adGroup ad on gk.adGroupID=ad.id join gce_campaign camp on ad.campaignID=camp.id where camp.searchEngineUserID=1742 and gk.status='Active';

======================================================
Active orders and their budget in particular reseller:
======================================================

select o.merchant_id,m.display,sum(anmb.budget) from smb.orders o join smb.merchants m on o.merchant_id=m.id join tsacommon.accounts a on m.id=a.description join admaxCampaigns ac on a.id=ac.accountID join admaxNominalMonthlyBudgets anmb on ac.id=anmb.admaxCampaignID where anmb.endDate IS NULL and o.state='PROCESSED' and o.realm_id like '%217b7962-bc63-4f7e-9bb5-a4eaa943a7a7%' group by o.merchant_id;





SELECT 'DATE','REALM','MERCHANT UUID','MERCHANT NAME','CAMPAIGN NAME','CLICKS','SPEND','IMPRESSIONS','DISTRIBUTION'
UNION ALL
select wh.startTime as 'DATE',r.name as 'REALM',m.id as 'MERCHANT UUID',CONCAT('\"',m.display,'\"') as 'MERCHANT NAME',sea.description as 'CAMPAIGN NAME',sum(wh.seClicks) as 'CLICKS',sum(wh.seAdCost) as 'SPEND',sum(wh.seImpressions) as 'IMPRESSIONS' ,
CASE 
       WHEN wh.distributionID = 3 THEN 'Google'
       WHEN wh.distributionID = 147 THEN 'Bing'
       WHEN wh.distributionID = 178 THEN 'Facebook'
       ELSE  'OTHER'
END as 'DISTRIBUTION'
from warehouse_1.whDailyGroupPerf wh 
JOIN tsacommon.accounts a on a.id=wh.accountID 
join tsacommon.searchEngineAccounts sea on sea.id=wh.searchEngineAccountID
JOIN smb.merchants m ON a.description = m.id 
JOIN smb.resellers r ON m.reseller_id = r.id 
where wh.accountID in(556,29) and wh.startTime between '2018-02-11' AND '2018-02-13'
group by wh.startTime,wh.searchEngineAccountID;
=====================================

ls | grep ^[0-9]* | head
sudo find . -name '*account-level-carryover-data-2020*' -type f -exec rm -rf {} \;
